{"version":3,"file":"aql-query.js","sourceRoot":"","sources":["../../src/aql-query.ts"],"names":[],"mappings":"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","sourcesContent":["import { ArangoCollection, isArangoCollection } from \"./collection\";\n\nexport interface AqlQuery {\n  query: string;\n  bindVars: { [key: string]: any };\n}\n\nexport interface GeneratedAqlQuery extends AqlQuery {\n  _source: () => { strings: string[]; args: AqlValue[] };\n}\n\nexport interface AqlLiteral {\n  toAQL: () => string;\n}\n\nexport type AqlValue =\n  | ArangoCollection\n  | GeneratedAqlQuery\n  | AqlLiteral\n  | string\n  | number\n  | boolean\n  | null\n  | undefined\n  | object\n  | any[];\n\nexport function isAqlQuery(query: any): query is AqlQuery {\n  return Boolean(query && query.query && query.bindVars);\n}\n\nexport function isGeneratedAqlQuery(query: any): query is GeneratedAqlQuery {\n  return isAqlQuery(query) && typeof (query as any)._source === \"function\";\n}\n\nexport function isAqlLiteral(literal: any): literal is AqlLiteral {\n  return Boolean(literal && typeof literal.toAQL === \"function\");\n}\n\nexport function aql(\n  templateStrings: TemplateStringsArray,\n  ...args: AqlValue[]\n): GeneratedAqlQuery {\n  const strings = [...templateStrings];\n  const bindVars: AqlQuery[\"bindVars\"] = {};\n  const bindVals = [];\n  let query = strings[0];\n  for (let i = 0; i < args.length; i++) {\n    const rawValue = args[i];\n    let value = rawValue;\n    if (isGeneratedAqlQuery(rawValue)) {\n      const src = rawValue._source();\n      if (src.args.length) {\n        query += src.strings[0];\n        args.splice(i, 1, ...src.args);\n        strings.splice(\n          i,\n          2,\n          strings[i] + src.strings[0],\n          ...src.strings.slice(1, src.args.length),\n          src.strings[src.args.length] + strings[i + 1]\n        );\n      } else {\n        query += rawValue.query + strings[i + 1];\n        args.splice(i, 1);\n        strings.splice(i, 2, strings[i] + rawValue.query + strings[i + 1]);\n      }\n      i -= 1;\n      continue;\n    }\n    if (rawValue === undefined) {\n      query += strings[i + 1];\n      continue;\n    }\n    if (isAqlLiteral(rawValue)) {\n      query += `${rawValue.toAQL()}${strings[i + 1]}`;\n      continue;\n    }\n    const index = bindVals.indexOf(rawValue);\n    const isKnown = index !== -1;\n    let name = `value${isKnown ? index : bindVals.length}`;\n    if (isArangoCollection(rawValue)) {\n      name = `@${name}`;\n      value = rawValue.name;\n    }\n    if (!isKnown) {\n      bindVals.push(rawValue);\n      bindVars[name] = value;\n    }\n    query += `@${name}${strings[i + 1]}`;\n  }\n  return {\n    query,\n    bindVars,\n    _source: () => ({ strings, args })\n  };\n}\n\nexport namespace aql {\n  export const literal = (\n    value: string | number | boolean | AqlLiteral | null | undefined\n  ): AqlLiteral => {\n    if (isAqlLiteral(value)) {\n      return value;\n    }\n    return {\n      toAQL() {\n        if (value === undefined) {\n          return \"\";\n        }\n        return String(value);\n      }\n    };\n  };\n  export const join = (\n    values: AqlValue[],\n    sep: string = \" \"\n  ): GeneratedAqlQuery => {\n    if (!values.length) {\n      return aql``;\n    }\n    if (values.length === 1) {\n      return aql`${values[0]}`;\n    }\n    return aql(\n      [\"\", ...Array(values.length - 1).fill(sep), \"\"] as any,\n      ...values\n    );\n  };\n}\n"]}