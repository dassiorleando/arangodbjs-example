{"version":3,"file":"graph.js","sourceRoot":"","sources":["../../src/graph.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,6CASsB;AAEtB,mCAAwC;AAExC,MAAa,qBAAsB,SAAQ,2BAAc;IAKvD,YAAY,UAAsB,EAAE,IAAY,EAAE,KAAY;QAC5D,KAAK,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;QAL1B,SAAI,GAAG,2BAAc,CAAC,mBAAmB,CAAC;QAMxC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;IAOD,QAAQ,CACN,cAA8B,EAC9B,OAAsC,EAAE;QAExC,IAAI,OAAO,IAAI,KAAK,SAAS,EAAE;YAC7B,IAAI,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;SAC3B;QACD,MAAM,EAAE,cAAc,GAAG,SAAS,EAAE,QAAQ,GAAG,KAAK,EAAE,GAAG,IAAI,CAAC;QAC9D,MAAM,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CACrC;YACE,IAAI,EAAE,iBAAiB,IAAI,CAAC,KAAK,CAAC,IAAI,WAAW,IAAI,CAAC,eAAe,CACnE,cAAc,CACf,EAAE;YACH,cAAc;SACf,EACD,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CACvB,CAAC;QACF,IAAI,CAAC,QAAQ;YAAE,OAAO,MAAM,CAAC;QAC7B,OAAO,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;YACxB,IAAI,qBAAa,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,QAAQ,KAAK,+BAAkB,EAAE;gBAC7D,OAAO,IAAI,CAAC;aACb;YACD,MAAM,GAAG,CAAC;QACZ,CAAC,CAAC,CAAC;IACL,CAAC;IAOD,MAAM,CACJ,cAA8B,EAC9B,OAAsC,EAAE;QAExC,IAAI,OAAO,IAAI,KAAK,SAAS,EAAE;YAC7B,IAAI,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;SAC3B;QACD,OAAO,IAAI,CAAC,QAAQ,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;IAC7C,CAAC;IAED,IAAI,CAAC,IAAS,EAAE,IAAgC;QAC9C,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,CAC7B;YACE,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,iBAAiB,IAAI,CAAC,KAAK,CAAC,IAAI,WAAW,IAAI,CAAC,IAAI,EAAE;YAC5D,IAAI,EAAE,IAAI;YACV,EAAE,EAAE,IAAI;SACT,EACD,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CACvB,CAAC;IACJ,CAAC;IAED,OAAO,CAAC,cAA8B,EAAE,QAAa,EAAE,OAAY,EAAE;;QACnE,MAAM,OAAO,GAA8B,EAAE,CAAC;QAC9C,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;YAC5B,IAAI,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC;SACtB;QACD,IAAI,IAAI,CAAC,GAAG,EAAE;YACZ,IAAI,GAAW,CAAC;YAChB,CAAC,SAAuB,EAAvB,YAAuB,EAAhB,0BAAO,CAAU,CAAC;YAC1B,OAAO,CAAC,UAAU,CAAC,GAAG,GAAG,CAAC;SAC3B;QACD,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,CAC7B;YACE,MAAM,EAAE,KAAK;YACb,IAAI,EAAE,iBAAiB,IAAI,CAAC,KAAK,CAAC,IAAI,WAAW,IAAI,CAAC,eAAe,CACnE,cAAc,CACf,EAAE;YACH,IAAI,EAAE,QAAQ;YACd,EAAE,EAAE,IAAI;YACR,OAAO;SACR,EACD,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CACvB,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,cAA8B,EAAE,QAAa,EAAE,OAAY,EAAE;;QAClE,MAAM,OAAO,GAA8B,EAAE,CAAC;QAC9C,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;YAC5B,IAAI,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC;SACtB;QACD,IAAI,IAAI,CAAC,GAAG,EAAE;YACZ,IAAI,GAAW,CAAC;YAChB,CAAC,SAAuB,EAAvB,YAAuB,EAAhB,0BAAO,CAAU,CAAC;YAC1B,OAAO,CAAC,UAAU,CAAC,GAAG,GAAG,CAAC;SAC3B;QACD,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,CAC7B;YACE,MAAM,EAAE,OAAO;YACf,IAAI,EAAE,iBAAiB,IAAI,CAAC,KAAK,CAAC,IAAI,WAAW,IAAI,CAAC,eAAe,CACnE,cAAc,CACf,EAAE;YACH,IAAI,EAAE,QAAQ;YACd,EAAE,EAAE,IAAI;YACR,OAAO;SACR,EACD,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CACvB,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,cAA8B,EAAE,OAAY,EAAE;;QACnD,MAAM,OAAO,GAA8B,EAAE,CAAC;QAC9C,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;YAC5B,IAAI,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC;SACtB;QACD,IAAI,IAAI,CAAC,GAAG,EAAE;YACZ,IAAI,GAAW,CAAC;YAChB,CAAC,SAAuB,EAAvB,YAAuB,EAAhB,0BAAO,CAAU,CAAC;YAC1B,OAAO,CAAC,UAAU,CAAC,GAAG,GAAG,CAAC;SAC3B;QACD,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,CAC7B;YACE,MAAM,EAAE,QAAQ;YAChB,IAAI,EAAE,iBAAiB,IAAI,CAAC,KAAK,CAAC,IAAI,WAAW,IAAI,CAAC,eAAe,CACnE,cAAc,CACf,EAAE;YACH,EAAE,EAAE,IAAI;YACR,OAAO;SACR,EACD,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CACxB,CAAC;IACJ,CAAC;CACF;AA1ID,sDA0IC;AAED,MAAa,mBAAoB,SAAQ,2BAAc;IAKrD,YAAY,UAAsB,EAAE,IAAY,EAAE,KAAY;QAC5D,KAAK,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;QAL1B,SAAI,GAAG,2BAAc,CAAC,eAAe,CAAC;QAMpC,IAAI,CAAC,IAAI,GAAG,2BAAc,CAAC,eAAe,CAAC;QAC3C,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;IAOD,QAAQ,CACN,cAA8B,EAC9B,OAAsC,EAAE;QAExC,IAAI,OAAO,IAAI,KAAK,SAAS,EAAE;YAC7B,IAAI,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;SAC3B;QACD,MAAM,EAAE,cAAc,GAAG,SAAS,EAAE,QAAQ,GAAG,KAAK,EAAE,GAAG,IAAI,CAAC;QAC9D,MAAM,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CACrC;YACE,IAAI,EAAE,iBAAiB,IAAI,CAAC,KAAK,CAAC,IAAI,SAAS,IAAI,CAAC,eAAe,CACjE,cAAc,CACf,EAAE;YACH,cAAc;SACf,EACD,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CACrB,CAAC;QACF,IAAI,CAAC,QAAQ;YAAE,OAAO,MAAM,CAAC;QAC7B,OAAO,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;YACxB,IAAI,qBAAa,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,QAAQ,KAAK,+BAAkB,EAAE;gBAC7D,OAAO,IAAI,CAAC;aACb;YACD,MAAM,GAAG,CAAC;QACZ,CAAC,CAAC,CAAC;IACL,CAAC;IASD,IAAI,CACF,IAAS,EACT,MAA6B,EAC7B,IAAqB,EACrB,IAAgC;QAEhC,IAAI,MAAM,KAAK,SAAS,EAAE;YACxB,IAAI,IAAI,KAAK,SAAS,EAAE;gBACtB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;gBAC1C,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,eAAe,CAAC,IAAK,CAAC,CAAC;aACxC;iBAAM;gBACL,IAAI,GAAG,MAAM,CAAC;aACf;SACF;QACD,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,CAC7B;YACE,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,iBAAiB,IAAI,CAAC,KAAK,CAAC,IAAI,SAAS,IAAI,CAAC,IAAI,EAAE;YAC1D,IAAI,EAAE,IAAI;YACV,EAAE,EAAE,IAAI;SACT,EACD,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CACrB,CAAC;IACJ,CAAC;IAED,OAAO,CAAC,cAA8B,EAAE,QAAa,EAAE,OAAY,EAAE;;QACnE,MAAM,OAAO,GAA8B,EAAE,CAAC;QAC9C,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;YAC5B,IAAI,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC;SACtB;QACD,IAAI,IAAI,CAAC,GAAG,EAAE;YACZ,IAAI,GAAW,CAAC;YAChB,CAAC,SAAuB,EAAvB,YAAuB,EAAhB,0BAAO,CAAU,CAAC;YAC1B,OAAO,CAAC,UAAU,CAAC,GAAG,GAAG,CAAC;SAC3B;QACD,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,CAC7B;YACE,MAAM,EAAE,KAAK;YACb,IAAI,EAAE,iBAAiB,IAAI,CAAC,KAAK,CAAC,IAAI,SAAS,IAAI,CAAC,eAAe,CACjE,cAAc,CACf,EAAE;YACH,IAAI,EAAE,QAAQ;YACd,EAAE,EAAE,IAAI;YACR,OAAO;SACR,EACD,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CACrB,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,cAA8B,EAAE,QAAa,EAAE,OAAY,EAAE;;QAClE,MAAM,OAAO,GAA8B,EAAE,CAAC;QAC9C,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;YAC5B,IAAI,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC;SACtB;QACD,IAAI,IAAI,CAAC,GAAG,EAAE;YACZ,IAAI,GAAW,CAAC;YAChB,CAAC,SAAuB,EAAvB,YAAuB,EAAhB,0BAAO,CAAU,CAAC;YAC1B,OAAO,CAAC,UAAU,CAAC,GAAG,GAAG,CAAC;SAC3B;QACD,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,CAC7B;YACE,MAAM,EAAE,OAAO;YACf,IAAI,EAAE,iBAAiB,IAAI,CAAC,KAAK,CAAC,IAAI,SAAS,IAAI,CAAC,eAAe,CACjE,cAAc,CACf,EAAE;YACH,IAAI,EAAE,QAAQ;YACd,EAAE,EAAE,IAAI;YACR,OAAO;SACR,EACD,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CACrB,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,cAA8B,EAAE,OAAY,EAAE;;QACnD,MAAM,OAAO,GAA8B,EAAE,CAAC;QAC9C,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;YAC5B,IAAI,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC;SACtB;QACD,IAAI,IAAI,CAAC,GAAG,EAAE;YACZ,IAAI,GAAW,CAAC;YAChB,CAAC,SAAuB,EAAvB,YAAuB,EAAhB,0BAAO,CAAU,CAAC;YAC1B,OAAO,CAAC,UAAU,CAAC,GAAG,GAAG,CAAC;SAC3B;QACD,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,CAC7B;YACE,MAAM,EAAE,QAAQ;YAChB,IAAI,EAAE,iBAAiB,IAAI,CAAC,KAAK,CAAC,IAAI,SAAS,IAAI,CAAC,eAAe,CACjE,cAAc,CACf,EAAE;YACH,EAAE,EAAE,IAAI;YACR,OAAO;SACR,EACD,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CACxB,CAAC;IACJ,CAAC;CACF;AAhJD,kDAgJC;AAED,MAAM,eAAe,GAAG,IAAI,CAAC;AAC7B,MAAa,KAAK;IAKhB,YAAY,UAAsB,EAAE,IAAY;QAC9C,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;IAChC,CAAC;IAED,GAAG;QACD,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,CAC7B,EAAE,IAAI,EAAE,iBAAiB,IAAI,CAAC,IAAI,EAAE,EAAE,EACtC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CACtB,CAAC;IACJ,CAAC;IAED,MAAM;QACJ,OAAO,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CACpB,GAAG,EAAE,CAAC,IAAI,EACV,GAAG,CAAC,EAAE;YACJ,IAAI,qBAAa,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,QAAQ,KAAK,eAAe,EAAE;gBAC1D,OAAO,KAAK,CAAC;aACd;YACD,MAAM,GAAG,CAAC;QACZ,CAAC,CACF,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,aAAkB,EAAE,EAAE,IAAgC;QAC3D,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,CAC7B;YACE,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,eAAe;YACrB,IAAI,oBACC,UAAU,IACb,IAAI,EAAE,IAAI,CAAC,IAAI,GAChB;YACD,EAAE,EAAE,IAAI;SACT,EACD,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CACtB,CAAC;IACJ,CAAC;IAED,IAAI,CAAC,kBAA2B,KAAK;QACnC,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,CAC7B;YACE,MAAM,EAAE,QAAQ;YAChB,IAAI,EAAE,iBAAiB,IAAI,CAAC,IAAI,EAAE;YAClC,EAAE,EAAE,EAAE,eAAe,EAAE;SACxB,EACD,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CACxB,CAAC;IACJ,CAAC;IAED,gBAAgB,CAAC,cAAsB;QACrC,OAAO,IAAI,qBAAqB,CAAC,IAAI,CAAC,WAAW,EAAE,cAAc,EAAE,IAAI,CAAC,CAAC;IAC3E,CAAC;IAED,qBAAqB,CAAC,IAAmC;QACvD,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,CAC7B,EAAE,IAAI,EAAE,iBAAiB,IAAI,CAAC,IAAI,SAAS,EAAE,EAAE,EAAE,IAAI,EAAE,EACvD,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAC5B,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,iBAAiB,CAAC,IAAmC;QACzD,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC;QACrD,OAAO,KAAK,CAAC,GAAG,CACd,CAAC,IAAS,EAAE,EAAE,CAAC,IAAI,qBAAqB,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,EAAE,IAAI,CAAC,CACvE,CAAC;IACJ,CAAC;IAED,mBAAmB,CAAC,UAAqC;QACvD,IAAI,+BAAkB,CAAC,UAAU,CAAC,EAAE;YAClC,UAAU,GAAG,UAAU,CAAC,IAAI,CAAC;SAC9B;QACD,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,CAC7B;YACE,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,iBAAiB,IAAI,CAAC,IAAI,SAAS;YACzC,IAAI,EAAE,EAAE,UAAU,EAAE;SACrB,EACD,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CACtB,CAAC;IACJ,CAAC;IAED,sBAAsB,CACpB,UAAqC,EACrC,iBAA0B,KAAK;QAE/B,IAAI,+BAAkB,CAAC,UAAU,CAAC,EAAE;YAClC,UAAU,GAAG,UAAU,CAAC,IAAI,CAAC;SAC9B;QACD,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,CAC7B;YACE,MAAM,EAAE,QAAQ;YAChB,IAAI,EAAE,iBAAiB,IAAI,CAAC,IAAI,WAAW,UAAU,EAAE;YACvD,EAAE,EAAE;gBACF,cAAc;aACf;SACF,EACD,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CACtB,CAAC;IACJ,CAAC;IAED,cAAc,CAAC,cAAsB;QACnC,OAAO,IAAI,mBAAmB,CAAC,IAAI,CAAC,WAAW,EAAE,cAAc,EAAE,IAAI,CAAC,CAAC;IACzE,CAAC;IAED,mBAAmB;QACjB,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,CAC7B,EAAE,IAAI,EAAE,iBAAiB,IAAI,CAAC,IAAI,OAAO,EAAE,EAC3C,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAC5B,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,eAAe;QACnB,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAC/C,OAAO,KAAK,CAAC,GAAG,CACd,CAAC,IAAS,EAAE,EAAE,CAAC,IAAI,mBAAmB,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,EAAE,IAAI,CAAC,CACrE,CAAC;IACJ,CAAC;IAED,iBAAiB,CAAC,UAAe;QAC/B,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,CAC7B;YACE,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,iBAAiB,IAAI,CAAC,IAAI,OAAO;YACvC,IAAI,EAAE,UAAU;SACjB,EACD,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CACtB,CAAC;IACJ,CAAC;IAED,qBAAqB,CAAC,cAAsB,EAAE,UAAe;QAC3D,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,CAC7B;YACE,MAAM,EAAE,KAAK;YACb,IAAI,EAAE,iBAAiB,IAAI,CAAC,IAAI,SAAS,cAAc,EAAE;YACzD,IAAI,EAAE,UAAU;SACjB,EACD,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CACtB,CAAC;IACJ,CAAC;IAED,oBAAoB,CAClB,cAAsB,EACtB,iBAA0B,KAAK;QAE/B,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,CAC7B;YACE,MAAM,EAAE,QAAQ;YAChB,IAAI,EAAE,iBAAiB,IAAI,CAAC,IAAI,SAAS,cAAc,EAAE;YACzD,EAAE,EAAE;gBACF,cAAc;aACf;SACF,EACD,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CACtB,CAAC;IACJ,CAAC;IAED,SAAS,CAAC,WAA2B,EAAE,IAAS;QAC9C,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,CAC7B;YACE,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,iBAAiB;YACvB,IAAI,oBACC,IAAI,IACP,WAAW,EACX,SAAS,EAAE,IAAI,CAAC,IAAI,GACrB;SACF,EACD,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CACvB,CAAC;IACJ,CAAC;CACF;AAhLD,sBAgLC","sourcesContent":["import {\n  ArangoCollection,\n  BaseCollection,\n  CollectionType,\n  DocumentHandle,\n  DocumentReadOptions,\n  DOCUMENT_NOT_FOUND,\n  EdgeCollection,\n  isArangoCollection\n} from \"./collection\";\nimport { Connection } from \"./connection\";\nimport { isArangoError } from \"./error\";\n\nexport class GraphVertexCollection extends BaseCollection {\n  type = CollectionType.DOCUMENT_COLLECTION;\n\n  graph: Graph;\n\n  constructor(connection: Connection, name: string, graph: Graph) {\n    super(connection, name);\n    this.graph = graph;\n  }\n\n  document(documentHandle: DocumentHandle, graceful: boolean): Promise<any>;\n  document(\n    documentHandle: DocumentHandle,\n    opts?: DocumentReadOptions\n  ): Promise<any>;\n  document(\n    documentHandle: DocumentHandle,\n    opts: boolean | DocumentReadOptions = {}\n  ): Promise<any> {\n    if (typeof opts === \"boolean\") {\n      opts = { graceful: opts };\n    }\n    const { allowDirtyRead = undefined, graceful = false } = opts;\n    const result = this._connection.request(\n      {\n        path: `/_api/gharial/${this.graph.name}/vertex/${this._documentHandle(\n          documentHandle\n        )}`,\n        allowDirtyRead\n      },\n      res => res.body.vertex\n    );\n    if (!graceful) return result;\n    return result.catch(err => {\n      if (isArangoError(err) && err.errorNum === DOCUMENT_NOT_FOUND) {\n        return null;\n      }\n      throw err;\n    });\n  }\n\n  vertex(documentHandle: DocumentHandle, graceful: boolean): Promise<any>;\n  vertex(\n    documentHandle: DocumentHandle,\n    opts?: DocumentReadOptions\n  ): Promise<any>;\n  vertex(\n    documentHandle: DocumentHandle,\n    opts: boolean | DocumentReadOptions = {}\n  ): Promise<any> {\n    if (typeof opts === \"boolean\") {\n      opts = { graceful: opts };\n    }\n    return this.document(documentHandle, opts);\n  }\n\n  save(data: any, opts?: { waitForSync?: boolean }) {\n    return this._connection.request(\n      {\n        method: \"POST\",\n        path: `/_api/gharial/${this.graph.name}/vertex/${this.name}`,\n        body: data,\n        qs: opts\n      },\n      res => res.body.vertex\n    );\n  }\n\n  replace(documentHandle: DocumentHandle, newValue: any, opts: any = {}) {\n    const headers: { [key: string]: string } = {};\n    if (typeof opts === \"string\") {\n      opts = { rev: opts };\n    }\n    if (opts.rev) {\n      let rev: string;\n      ({ rev, ...opts } = opts);\n      headers[\"if-match\"] = rev;\n    }\n    return this._connection.request(\n      {\n        method: \"PUT\",\n        path: `/_api/gharial/${this.graph.name}/vertex/${this._documentHandle(\n          documentHandle\n        )}`,\n        body: newValue,\n        qs: opts,\n        headers\n      },\n      res => res.body.vertex\n    );\n  }\n\n  update(documentHandle: DocumentHandle, newValue: any, opts: any = {}) {\n    const headers: { [key: string]: string } = {};\n    if (typeof opts === \"string\") {\n      opts = { rev: opts };\n    }\n    if (opts.rev) {\n      let rev: string;\n      ({ rev, ...opts } = opts);\n      headers[\"if-match\"] = rev;\n    }\n    return this._connection.request(\n      {\n        method: \"PATCH\",\n        path: `/_api/gharial/${this.graph.name}/vertex/${this._documentHandle(\n          documentHandle\n        )}`,\n        body: newValue,\n        qs: opts,\n        headers\n      },\n      res => res.body.vertex\n    );\n  }\n\n  remove(documentHandle: DocumentHandle, opts: any = {}) {\n    const headers: { [key: string]: string } = {};\n    if (typeof opts === \"string\") {\n      opts = { rev: opts };\n    }\n    if (opts.rev) {\n      let rev: string;\n      ({ rev, ...opts } = opts);\n      headers[\"if-match\"] = rev;\n    }\n    return this._connection.request(\n      {\n        method: \"DELETE\",\n        path: `/_api/gharial/${this.graph.name}/vertex/${this._documentHandle(\n          documentHandle\n        )}`,\n        qs: opts,\n        headers\n      },\n      res => res.body.removed\n    );\n  }\n}\n\nexport class GraphEdgeCollection extends EdgeCollection {\n  type = CollectionType.EDGE_COLLECTION;\n\n  graph: Graph;\n\n  constructor(connection: Connection, name: string, graph: Graph) {\n    super(connection, name);\n    this.type = CollectionType.EDGE_COLLECTION;\n    this.graph = graph;\n  }\n\n  document(documentHandle: DocumentHandle, graceful: boolean): Promise<any>;\n  document(\n    documentHandle: DocumentHandle,\n    opts?: DocumentReadOptions\n  ): Promise<any>;\n  document(\n    documentHandle: DocumentHandle,\n    opts: boolean | DocumentReadOptions = {}\n  ): Promise<any> {\n    if (typeof opts === \"boolean\") {\n      opts = { graceful: opts };\n    }\n    const { allowDirtyRead = undefined, graceful = false } = opts;\n    const result = this._connection.request(\n      {\n        path: `/_api/gharial/${this.graph.name}/edge/${this._documentHandle(\n          documentHandle\n        )}`,\n        allowDirtyRead\n      },\n      res => res.body.edge\n    );\n    if (!graceful) return result;\n    return result.catch(err => {\n      if (isArangoError(err) && err.errorNum === DOCUMENT_NOT_FOUND) {\n        return null;\n      }\n      throw err;\n    });\n  }\n\n  save(data: any, opts?: { waitForSync?: boolean }): Promise<any>;\n  save(\n    data: any,\n    fromId: DocumentHandle,\n    toId: DocumentHandle,\n    opts?: { waitForSync?: boolean }\n  ): Promise<any>;\n  save(\n    data: any,\n    fromId?: DocumentHandle | any,\n    toId?: DocumentHandle,\n    opts?: { waitForSync?: boolean }\n  ) {\n    if (fromId !== undefined) {\n      if (toId !== undefined) {\n        data._from = this._documentHandle(fromId);\n        data._to = this._documentHandle(toId!);\n      } else {\n        opts = fromId;\n      }\n    }\n    return this._connection.request(\n      {\n        method: \"POST\",\n        path: `/_api/gharial/${this.graph.name}/edge/${this.name}`,\n        body: data,\n        qs: opts\n      },\n      res => res.body.edge\n    );\n  }\n\n  replace(documentHandle: DocumentHandle, newValue: any, opts: any = {}) {\n    const headers: { [key: string]: string } = {};\n    if (typeof opts === \"string\") {\n      opts = { rev: opts };\n    }\n    if (opts.rev) {\n      let rev: string;\n      ({ rev, ...opts } = opts);\n      headers[\"if-match\"] = rev;\n    }\n    return this._connection.request(\n      {\n        method: \"PUT\",\n        path: `/_api/gharial/${this.graph.name}/edge/${this._documentHandle(\n          documentHandle\n        )}`,\n        body: newValue,\n        qs: opts,\n        headers\n      },\n      res => res.body.edge\n    );\n  }\n\n  update(documentHandle: DocumentHandle, newValue: any, opts: any = {}) {\n    const headers: { [key: string]: string } = {};\n    if (typeof opts === \"string\") {\n      opts = { rev: opts };\n    }\n    if (opts.rev) {\n      let rev: string;\n      ({ rev, ...opts } = opts);\n      headers[\"if-match\"] = rev;\n    }\n    return this._connection.request(\n      {\n        method: \"PATCH\",\n        path: `/_api/gharial/${this.graph.name}/edge/${this._documentHandle(\n          documentHandle\n        )}`,\n        body: newValue,\n        qs: opts,\n        headers\n      },\n      res => res.body.edge\n    );\n  }\n\n  remove(documentHandle: DocumentHandle, opts: any = {}) {\n    const headers: { [key: string]: string } = {};\n    if (typeof opts === \"string\") {\n      opts = { rev: opts };\n    }\n    if (opts.rev) {\n      let rev: string;\n      ({ rev, ...opts } = opts);\n      headers[\"if-match\"] = rev;\n    }\n    return this._connection.request(\n      {\n        method: \"DELETE\",\n        path: `/_api/gharial/${this.graph.name}/edge/${this._documentHandle(\n          documentHandle\n        )}`,\n        qs: opts,\n        headers\n      },\n      res => res.body.removed\n    );\n  }\n}\n\nconst GRAPH_NOT_FOUND = 1924;\nexport class Graph {\n  name: string;\n\n  private _connection: Connection;\n\n  constructor(connection: Connection, name: string) {\n    this.name = name;\n    this._connection = connection;\n  }\n\n  get() {\n    return this._connection.request(\n      { path: `/_api/gharial/${this.name}` },\n      res => res.body.graph\n    );\n  }\n\n  exists(): Promise<boolean> {\n    return this.get().then(\n      () => true,\n      err => {\n        if (isArangoError(err) && err.errorNum === GRAPH_NOT_FOUND) {\n          return false;\n        }\n        throw err;\n      }\n    );\n  }\n\n  create(properties: any = {}, opts?: { waitForSync?: boolean }) {\n    return this._connection.request(\n      {\n        method: \"POST\",\n        path: \"/_api/gharial\",\n        body: {\n          ...properties,\n          name: this.name\n        },\n        qs: opts\n      },\n      res => res.body.graph\n    );\n  }\n\n  drop(dropCollections: boolean = false) {\n    return this._connection.request(\n      {\n        method: \"DELETE\",\n        path: `/_api/gharial/${this.name}`,\n        qs: { dropCollections }\n      },\n      res => res.body.removed\n    );\n  }\n\n  vertexCollection(collectionName: string) {\n    return new GraphVertexCollection(this._connection, collectionName, this);\n  }\n\n  listVertexCollections(opts?: { excludeOrphans?: boolean }) {\n    return this._connection.request(\n      { path: `/_api/gharial/${this.name}/vertex`, qs: opts },\n      res => res.body.collections\n    );\n  }\n\n  async vertexCollections(opts?: { excludeOrphans?: boolean }) {\n    const names = await this.listVertexCollections(opts);\n    return names.map(\n      (name: any) => new GraphVertexCollection(this._connection, name, this)\n    );\n  }\n\n  addVertexCollection(collection: string | ArangoCollection) {\n    if (isArangoCollection(collection)) {\n      collection = collection.name;\n    }\n    return this._connection.request(\n      {\n        method: \"POST\",\n        path: `/_api/gharial/${this.name}/vertex`,\n        body: { collection }\n      },\n      res => res.body.graph\n    );\n  }\n\n  removeVertexCollection(\n    collection: string | ArangoCollection,\n    dropCollection: boolean = false\n  ) {\n    if (isArangoCollection(collection)) {\n      collection = collection.name;\n    }\n    return this._connection.request(\n      {\n        method: \"DELETE\",\n        path: `/_api/gharial/${this.name}/vertex/${collection}`,\n        qs: {\n          dropCollection\n        }\n      },\n      res => res.body.graph\n    );\n  }\n\n  edgeCollection(collectionName: string) {\n    return new GraphEdgeCollection(this._connection, collectionName, this);\n  }\n\n  listEdgeCollections() {\n    return this._connection.request(\n      { path: `/_api/gharial/${this.name}/edge` },\n      res => res.body.collections\n    );\n  }\n\n  async edgeCollections() {\n    const names = await this.listEdgeCollections();\n    return names.map(\n      (name: any) => new GraphEdgeCollection(this._connection, name, this)\n    );\n  }\n\n  addEdgeDefinition(definition: any) {\n    return this._connection.request(\n      {\n        method: \"POST\",\n        path: `/_api/gharial/${this.name}/edge`,\n        body: definition\n      },\n      res => res.body.graph\n    );\n  }\n\n  replaceEdgeDefinition(definitionName: string, definition: any) {\n    return this._connection.request(\n      {\n        method: \"PUT\",\n        path: `/_api/gharial/${this.name}/edge/${definitionName}`,\n        body: definition\n      },\n      res => res.body.graph\n    );\n  }\n\n  removeEdgeDefinition(\n    definitionName: string,\n    dropCollection: boolean = false\n  ) {\n    return this._connection.request(\n      {\n        method: \"DELETE\",\n        path: `/_api/gharial/${this.name}/edge/${definitionName}`,\n        qs: {\n          dropCollection\n        }\n      },\n      res => res.body.graph\n    );\n  }\n\n  traversal(startVertex: DocumentHandle, opts: any) {\n    return this._connection.request(\n      {\n        method: \"POST\",\n        path: `/_api/traversal`,\n        body: {\n          ...opts,\n          startVertex,\n          graphName: this.name\n        }\n      },\n      res => res.body.result\n    );\n  }\n}\n"]}