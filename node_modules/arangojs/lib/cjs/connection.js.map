{"version":3,"file":"connection.js","sourceRoot":"","sources":["../../src/connection.ts"],"names":[],"mappings":"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","sourcesContent":["import { stringify as querystringify } from \"querystring\";\nimport { ArangoError, HttpError } from \"./error\";\nimport {\n  ArangojsResponse,\n  createRequest,\n  isBrowser,\n  RequestFunction\n} from \"./util/request\";\nimport { sanitizeUrl } from \"./util/sanitizeUrl\";\n\nconst LinkedList = require(\"linkedlist/lib/linkedlist\") as typeof Array;\n\nconst MIME_JSON = /\\/(json|javascript)(\\W|$)/;\nconst LEADER_ENDPOINT_HEADER = \"x-arango-endpoint\";\n\nexport type LoadBalancingStrategy = \"NONE\" | \"ROUND_ROBIN\" | \"ONE_RANDOM\";\n\ninterface SystemError extends Error {\n  code: string;\n  errno: number | string;\n  syscall: string;\n}\n\nfunction isSystemError(err: Error): err is SystemError {\n  return (\n    Object.getPrototypeOf(err) === Error.prototype &&\n    err.hasOwnProperty(\"code\") &&\n    err.hasOwnProperty(\"errno\") &&\n    err.hasOwnProperty(\"syscall\")\n  );\n}\n\ntype UrlInfo = {\n  absolutePath?: boolean;\n  basePath?: string;\n  path?: string;\n  qs?: string | { [key: string]: any };\n};\n\nexport type RequestOptions = {\n  host?: number;\n  method?: string;\n  body?: any;\n  expectBinary?: boolean;\n  isBinary?: boolean;\n  allowDirtyRead?: boolean;\n  headers?: { [key: string]: string };\n  timeout?: number;\n  absolutePath?: boolean;\n  basePath?: string;\n  path?: string;\n  qs?: string | { [key: string]: any };\n};\n\ntype Task = {\n  host?: number;\n  allowDirtyRead: boolean;\n  resolve: Function;\n  reject: Function;\n  retries: number;\n  options: {\n    method: string;\n    expectBinary: boolean;\n    timeout?: number;\n    url: { pathname: string; search?: string };\n    headers: { [key: string]: string };\n    body: any;\n  };\n};\n\nexport type Config =\n  | string\n  | string[]\n  | Partial<{\n      url: string | string[];\n      isAbsolute: boolean;\n      arangoVersion: number;\n      loadBalancingStrategy: LoadBalancingStrategy;\n      maxRetries: false | number;\n      agent: any;\n      agentOptions: { [key: string]: any };\n      headers: { [key: string]: string };\n    }>;\n\nexport class Connection {\n  private _activeTasks: number = 0;\n  private _agent?: any;\n  private _agentOptions: { [key: string]: any };\n  private _arangoVersion: number = 30000;\n  private _databaseName: string | false = \"_system\";\n  private _headers: { [key: string]: string };\n  private _loadBalancingStrategy: LoadBalancingStrategy;\n  private _useFailOver: boolean;\n  private _shouldRetry: boolean;\n  private _maxRetries: number;\n  private _maxTasks: number;\n  private _queue: Task[] = new LinkedList();\n  private _hosts: RequestFunction[] = [];\n  private _urls: string[] = [];\n  private _activeHost: number;\n  private _activeDirtyHost: number;\n\n  constructor(config: Config = {}) {\n    if (typeof config === \"string\") config = { url: config };\n    else if (Array.isArray(config)) config = { url: config };\n\n    if (config.arangoVersion !== undefined) {\n      this._arangoVersion = config.arangoVersion;\n    }\n    if (config.isAbsolute) {\n      this._databaseName = false;\n    }\n    this._agent = config.agent;\n    this._agentOptions = isBrowser\n      ? { ...config.agentOptions! }\n      : {\n          maxSockets: 3,\n          keepAlive: true,\n          keepAliveMsecs: 1000,\n          ...config.agentOptions\n        };\n    this._maxTasks = this._agentOptions.maxSockets || 3;\n    if (this._agentOptions.keepAlive) this._maxTasks *= 2;\n\n    this._headers = { ...config.headers };\n    this._loadBalancingStrategy = config.loadBalancingStrategy || \"NONE\";\n    this._useFailOver = this._loadBalancingStrategy !== \"ROUND_ROBIN\";\n    if (config.maxRetries === false) {\n      this._shouldRetry = false;\n      this._maxRetries = 0;\n    } else {\n      this._shouldRetry = true;\n      this._maxRetries = config.maxRetries || 0;\n    }\n\n    const urls = config.url\n      ? Array.isArray(config.url)\n        ? config.url\n        : [config.url]\n      : [\"http://localhost:8529\"];\n    this.addToHostList(urls);\n\n    if (this._loadBalancingStrategy === \"ONE_RANDOM\") {\n      this._activeHost = Math.floor(Math.random() * this._hosts.length);\n      this._activeDirtyHost = Math.floor(Math.random() * this._hosts.length);\n    } else {\n      this._activeHost = 0;\n      this._activeDirtyHost = 0;\n    }\n  }\n\n  private get _databasePath() {\n    return this._databaseName === false ? \"\" : `/_db/${this._databaseName}`;\n  }\n\n  private _runQueue() {\n    if (!this._queue.length || this._activeTasks >= this._maxTasks) return;\n    const task = this._queue.shift()!;\n    let host = this._activeHost;\n    if (task.host !== undefined) {\n      host = task.host;\n    } else if (task.allowDirtyRead) {\n      host = this._activeDirtyHost;\n      this._activeDirtyHost = (this._activeDirtyHost + 1) % this._hosts.length;\n      task.options.headers[\"x-arango-allow-dirty-read\"] = \"true\";\n    } else if (this._loadBalancingStrategy === \"ROUND_ROBIN\") {\n      this._activeHost = (this._activeHost + 1) % this._hosts.length;\n    }\n    this._activeTasks += 1;\n    this._hosts[host](task.options, (err, res) => {\n      this._activeTasks -= 1;\n      if (err) {\n        if (\n          !task.allowDirtyRead &&\n          this._hosts.length > 1 &&\n          this._activeHost === host &&\n          this._useFailOver\n        ) {\n          this._activeHost = (this._activeHost + 1) % this._hosts.length;\n        }\n        if (\n          !task.host &&\n          this._shouldRetry &&\n          task.retries < (this._maxRetries || this._hosts.length - 1) &&\n          isSystemError(err) &&\n          err.syscall === \"connect\" &&\n          err.code === \"ECONNREFUSED\"\n        ) {\n          task.retries += 1;\n          this._queue.push(task);\n        } else {\n          task.reject(err);\n        }\n      } else {\n        const response = res!;\n        if (\n          response.statusCode === 503 &&\n          response.headers[LEADER_ENDPOINT_HEADER]\n        ) {\n          const url = response.headers[LEADER_ENDPOINT_HEADER]!;\n          const [index] = this.addToHostList(url);\n          task.host = index;\n          if (this._activeHost === host) {\n            this._activeHost = index;\n          }\n          this._queue.push(task);\n        } else {\n          response.host = host;\n          task.resolve(response);\n        }\n      }\n      this._runQueue();\n    });\n  }\n\n  private _buildUrl({ absolutePath = false, basePath, path, qs }: UrlInfo) {\n    let pathname = \"\";\n    let search;\n    if (!absolutePath) {\n      pathname = this._databasePath;\n      if (basePath) pathname += basePath;\n    }\n    if (path) pathname += path;\n    if (qs) {\n      if (typeof qs === \"string\") search = `?${qs}`;\n      else search = `?${querystringify(qs)}`;\n    }\n    return search ? { pathname, search } : { pathname };\n  }\n\n  addToHostList(urls: string | string[]): number[] {\n    const cleanUrls = (Array.isArray(urls) ? urls : [urls]).map(url =>\n      sanitizeUrl(url)\n    );\n    const newUrls = cleanUrls.filter(url => this._urls.indexOf(url) === -1);\n    this._urls.push(...newUrls);\n    this._hosts.push(\n      ...newUrls.map((url: string) =>\n        createRequest(url, this._agentOptions, this._agent)\n      )\n    );\n    return cleanUrls.map(url => this._urls.indexOf(url));\n  }\n\n  get arangoMajor() {\n    return Math.floor(this._arangoVersion / 10000);\n  }\n\n  getDatabaseName() {\n    return this._databaseName;\n  }\n\n  getActiveHost() {\n    return this._activeHost;\n  }\n\n  setDatabaseName(databaseName: string) {\n    if (this._databaseName === false) {\n      throw new Error(\"Can not change database from absolute URL\");\n    }\n    this._databaseName = databaseName;\n  }\n\n  setHeader(key: string, value: string) {\n    this._headers[key] = value;\n  }\n\n  close() {\n    for (const host of this._hosts) {\n      if (host.close) host.close();\n    }\n  }\n\n  request<T = ArangojsResponse>(\n    {\n      host,\n      method = \"GET\",\n      body,\n      expectBinary = false,\n      isBinary = false,\n      allowDirtyRead = false,\n      timeout = 0,\n      headers,\n      ...urlInfo\n    }: RequestOptions,\n    getter?: (res: ArangojsResponse) => T\n  ): Promise<T> {\n    return new Promise((resolve, reject) => {\n      let contentType = \"text/plain\";\n      if (isBinary) {\n        contentType = \"application/octet-stream\";\n      } else if (body) {\n        if (typeof body === \"object\") {\n          body = JSON.stringify(body);\n          contentType = \"application/json\";\n        } else {\n          body = String(body);\n        }\n      }\n\n      const extraHeaders: { [key: string]: string } = {\n        ...this._headers,\n        \"content-type\": contentType,\n        \"x-arango-version\": String(this._arangoVersion)\n      };\n\n      this._queue.push({\n        retries: 0,\n        host,\n        allowDirtyRead,\n        options: {\n          url: this._buildUrl(urlInfo),\n          headers: { ...extraHeaders, ...headers },\n          timeout,\n          method,\n          expectBinary,\n          body\n        },\n        reject,\n        resolve: (res: ArangojsResponse) => {\n          const contentType = res.headers[\"content-type\"];\n          let parsedBody: any = undefined;\n          if (res.body.length && contentType && contentType.match(MIME_JSON)) {\n            try {\n              parsedBody = res.body;\n              parsedBody = JSON.parse(parsedBody);\n            } catch (e) {\n              if (!expectBinary) {\n                if (typeof parsedBody !== \"string\") {\n                  parsedBody = res.body.toString(\"utf-8\");\n                }\n                e.response = res;\n                reject(e);\n                return;\n              }\n            }\n          } else if (res.body && !expectBinary) {\n            parsedBody = res.body.toString(\"utf-8\");\n          } else {\n            parsedBody = res.body;\n          }\n          if (\n            parsedBody &&\n            parsedBody.hasOwnProperty(\"error\") &&\n            parsedBody.hasOwnProperty(\"code\") &&\n            parsedBody.hasOwnProperty(\"errorMessage\") &&\n            parsedBody.hasOwnProperty(\"errorNum\")\n          ) {\n            res.body = parsedBody;\n            reject(new ArangoError(res));\n          } else if (res.statusCode && res.statusCode >= 400) {\n            res.body = parsedBody;\n            reject(new HttpError(res));\n          } else {\n            if (!expectBinary) res.body = parsedBody;\n            resolve(getter ? getter(res) : (res as any));\n          }\n        }\n      });\n      this._runQueue();\n    });\n  }\n}\n"]}